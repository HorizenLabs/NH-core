name: Orchestrator

on:
  push:
    branches: [WEB3-588-Slack-Notifications]

jobs:
  build-test-job:
    uses: ./.github/workflows/CI-build-test.yml
  test-coverage-job:
    uses: ./.github/workflows/CI-coverage.yml
  lint-format-job:
    uses: ./.github/workflows/CI-lint-format.yml
  e2e-test-job:
    uses: ./.github/workflows/CI-e2e-test.yml

  notify-slack:
    runs-on: ubuntu-latest
    needs: [build-test-job,test-coverage-job,lint-format-job, e2e-test-job]
    if: ${{ always() }}
    steps:
      - name: Report Job Statuses
        run: |
          echo "Build and Test Job Status: ${{ needs.build-test-job.result }}"
          echo "Test Coverage Job Status: ${{ needs.test-coverage-job.result }}"
          echo "Lint and Format Job Status: ${{ needs.lint-format-job.result }}"
          echo "E2E Test Job Status: ${{ needs.e2e-test-job.result }}"
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
      - name: Display structure of downloaded files
        run: ls -R
      - name: Display unit test output
        run: |
          if [ -f "./unit-test-output/unit_tests_output.txt" ]; then
            cat "./unit-test-output/unit_tests_output.txt"
          else
            echo "Unit test output not found."
          fi
      - name: Display integration test output
        run: |
          if [ -f "./integration-test-output/integration_tests_output.txt" ]; then
            cat "./integration-test-output/integration_tests_output.txt"
          else
            echo "Integration test output not found."
          fi
      - name: Display test coverage output
        run: |
          if [ -f "./coverage-output/coverage_report.json" ]; then
            cat "./coverage-output/coverage_report.json"
          else
            echo "Test Coverage output not found."
          fi
      - name: Display linting output
        run: |
          if [ -f "./linting-output/linting_output.txt" ]; then
            cat "./linting-output/linting_output.txt"
          else
            echo "Linting output not found."
          fi
      - name: Display formatting output
        run: |
          if [ -f "./formatting-output/formatting_output.txt" ]; then
            cat "./formatting-output/formatting_output.txt"
          else
            echo "Formatting output not found."
          fi
      - name: Prepare Slack Notification Data
        run: |
          OVERALL_STATUS="success"

          if [ "${{ needs.build-test-job.result }}" != "success" ] || 
              [ "${{ needs.test-coverage-job.result }}" != "success" ] ||
              [ "${{ needs.lint-format-job.result }}" != "success" ] || 
              [ "${{ needs.e2e-test-job.result }}" != "success" ]; then
            OVERALL_STATUS="failure"
          fi
          
          COLOR_SUCCESS="#36a64f"
          COLOR_FAILURE="#ff0000"
          
          if [ "$OVERALL_STATUS" = "success" ]; then
            BAR_COLOR="$COLOR_SUCCESS"
          else
            BAR_COLOR="$COLOR_FAILURE"
          fi
          
          echo "BAR_COLOR=$BAR_COLOR" >> $GITHUB_ENV
          echo "OVERALL_STATUS=$OVERALL_STATUS" >> $GITHUB_ENV
      - name: Send Slack Notification
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "text": "NH-CORE BUILD",
              "attachments": [
                {
                  "color": "${{ env.BAR_COLOR }}",
                  "blocks": [
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": "*Overall Status:* ${{ env.OVERALL_STATUS }}\nDetails:"
                      }
                    },
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": "Build & Test: ${{ needs.build-test-job.result }}\nTest Coverage: ${{ needs.test-coverage-job.result }}\nLint & Format: ${{ needs.lint-format-job.result }}\nE2E Test: ${{ needs.e2e-test-job.result }}"
                      }
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}